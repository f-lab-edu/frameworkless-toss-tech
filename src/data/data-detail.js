export const DETAIL_DATA = {
    id1: {   
        thumbImg: "https://static.toss.im/illusts-common/react-native-thumbnail.png",
        title: "토스가 꿈꾸는 React Native 기술의 미래",
        writer: "박서진ㆍ토스코어 Head of Frontend",
        uploadDate: "2024.3.25",
        content: `안녕하세요, 토스 프론트엔드 엔지니어링 헤드 박서진입니다.
        토스에서는 최고의 사용자 경험이 필요한 곳은 Native, 매일매일 실험으로 제품을 개선하는 제품은 React Native/WebView로 구성하고 있어요.
        토스 프론트엔드 챕터는 지난 2022년 6월부터 React Native 기술에 투자하고 있는데요. 이번 기술 블로그 아티클에서는 왜 React Native를 고려하고 있는지, 현재 어느 정도까지 사용하고 있는지, 그리고 앞으로의 계획이 어떻게 되는지에 대해서 소개드리려고 합니다.
        왜 React Native인가
        토스는 React Native로 매끄러운 사용자 경험과 높은 개발 생산성을 제공하여, 모바일 서비스를 만드는 새로운 표준을 제시하고자 해요.
        React Native로 서비스를 개발하면, WebView로 서비스를 만들 때보다 사용자 경험을 크게 개선할 수 있어요. React Native는 기본적으로 파일 시스템에서 JavaScript 파일을 읽어오기 때문에, WebView와 다르게 네트워크로 인한 로딩 속도를 없앨 수 있기 때문이죠.
        한국처럼 대부분의 사용자가 2020년 이후에 출시한 최신 핸드폰을 쓰는 환경에서는, JavaScript 실행도 매우 빨라요. 토스에서 “매일 방문 미션” 제품을 React Native로 만들었을 때, 1초 이상의 로딩 속도를 감축시킬 수 있었어요. 
        `,
    },
    id2:  {   
        thumbImg: "https://static.toss.im/assets/payments/contents/payments-docu-thumb.jpg",
        title: "더 자유롭고, 빠르고, 정확하게: 토스페이먼츠 API 문서 엔지니어링",
        writer: "한주연/신지호ㆍ토스페이먼츠 DX(Developer eXperience) 팀",
        uploadDate: "2024.3.20",
        content: `다른 회사나 서비스에서 만든 API를 사용해 본 경험이 있으신가요? 복잡한 API를 파악하거나 새로운 업데이트를 적용하려고 할 때 설명이 정확하지 않다면 API를 적용하는 데 어려움을 겪죠. 그래서 API를 외부 개발자에게 제공할 때, 명확하고 쉽게 이해할 수 있는 문서는 필수적이에요.
        토스페이먼츠는 최고의 문서 경험을 제공하기 위해 자체적인 문서 엔지니어링 시스템을 갖추고 있어요. 엔지니어링 스택으로는 MDX와 OAS(Open API Specification), 마크다운 변환 라이브러리인 remark를 사용하는데요. MDX를 사용하기 때문에 테크니컬 라이터가 다양한 컴포넌트를 사용해 자유롭게 문서를 구성할 수 있고, OAS는 API 하나를 문서에 업데이트하는데 드는 시간과 노력을 줄여줘요. remark와 결합해서 문서 내용 일부를 자동화도 해요. 그럼 지금부터 어떻게 토스페이먼츠 문서 작성이 더 자유롭고, 빠르고, 정확해졌는지 하나씩 알려드릴게요.
        문서의 근간은 텍스트 콘텐츠죠. 하지만 테크니컬 라이터들은 사용자가 더 이해하기 쉬운 문서로 만들기 위해 여러 가지 구성을 시도해요. 예를 들어 레이아웃을 만들어서 콘텐츠 구조를 더 보기 좋게 만들거나, 배너나 버튼으로 사용자 행동을 유도할 수 있어요. 토스페이먼츠에서는 테크니컬 라이터들이 이런 콘텐츠 구성을 자유롭게 할 수 있도록 문서 작성에 MDX(Markdown + JSX)를 사용해요. MDX는 Markdown 문서에 React 컴포넌트를 삽입할 수 있게 해주는 포맷이에요. MDX를 사용하면 React 기반의 프레임워크나 사이트에서 동적인 컴포넌트를 Markdown 문서에 쉽게 추가할 수 있죠.
        토스페이먼츠 문서 중 자동결제(빌링) 이해하기 페이지를 예로 들어 볼게요. 아래 MDX 문서를 보면, #로 제목을 나타내고 ![]()로 이미지를 삽입하는 마크다운 형식을 따르고 있는데요. 중간에 <Grid>, <IconCard> 같은 컴포넌트 태그도 보이네요. <Grid>는 토스 디자인 시스템에서 제공하는 컴포넌트로 마크업 없이 그리드를 나눌 수 있게 해줘요. <IconCard>는 콘텐츠를 효과적으로 제안하는 컴포넌트로, 독자가 제안된 콘텐츠에서 기대할 수 있는 사항에 대한 설명이 들어있죠. 이런 식으로 필요한 태그를 추가하면서 문서를 자유롭게 구성할 수 있어요.
        `,
    },
    id3:  {   
        thumbImg: "https://static.toss.im/illusts/240403-mainthumbnail.png",
        title: "제품이 커지면 디자인 시스템 가이드는 어떻게 개선돼야 할까?",
        writer: "황희영ㆍ토스코어 Platform Designer",
        uploadDate: "2024.4.5",
        content: `300명이 넘는 개발자와 디자이너를 위한 디자인 시스템을 4명의 디자이너가 운영하고 있어요. 이 과정에서 컴포넌트의 유려함뿐만 아니라, 가이드의 효율적인 제작도 중요함을 깨달았어요. 이번 아티클에서는 TDS 컴포넌트 가이드를 제작할 때 어떤 부분들을 고려해서 만들어가고 있는지 소개해드릴게요.
        문제 컴포넌트를 개선하려고 할 때, 기존 가이드로는 동료 플랫폼 디자이너 및 개발자분들과 소통하기 어려웠어요. 컴포넌트 가이드 작성에 대한 규칙이 없으니 디자이너마다 작성된 방식이 제각기였고, 이 때문에 기존에 작성된 가이드를 읽는 데에도 컴포넌트를 온전히 파악하기 어려웠기 때문이에요.
        기존 컴포넌트의 가이드에서 어떤 부분들이 문제였길래, 컴포넌트를 만드는데 메이커들이 어려움을 겪었을까요? 그리고 플랫폼 디자이너들은 이 문제들을 어떻게 해결했을까요?
        `,
    },
    id4:  {   
        thumbImg: "https://static.toss.im/illusts/research_method_image.png",
        title: "토스 UX 리서처는 어떤 방법론을 사용할까?",
        writer: "김서연ㆍ토스증권 UX Researcher",
        uploadDate: "2024.3.13",
        content: `UX 리서치에 관심 있는 분들과 커피챗을 하면 듣게 되는 공통적인 질문이 있어요.
        “토스 UX 리서처는 어떤 리서치 방법론을 쓰나요?”
        “토스 UX 리서처는 리서치를 처음부터 끝까지 혼자서 하는 구조인가요?”
        이 질문을 들었을 때 딱 잘라 답을 드리기 어려우면서도, 언젠간 시원하게 풀어보고 싶다는 생각이 있었어요. 이 글을 통해 토스의 UX 리서처는 어떤 방법론을 쓰는지, 리서치를 처음부터 끝까지 혼자서 도대체 어떻게 해나가는지 알려드릴게요.
        `,
    },
}